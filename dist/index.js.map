{
  "version": 3,
  "sources": ["../src/page/filter.ts", "../src/routeDispatcher.ts", "../src/index.ts"],
  "sourcesContent": ["\n/*\n * Page | Filter \n */ \n\nexport class FilterPage {\n\n  constructor() {\n  }\n  \n  init() {\n\n    console.log(\"Filter page init.\"); \n\n    // Select all radio buttons within the .dyn-brand elements\n    const radioButtons = document.querySelectorAll('.brands-menu .dyn-brand .w-form-formradioinput.radio-button') as NodeListOf<HTMLInputElement>;\n    \n    console.log(\"radio buttons\", radioButtons); \n\n    // Iterate over each radio button to add the event listener\n    radioButtons.forEach((radioButton: HTMLInputElement) => {\n        radioButton.addEventListener('change', (event: Event) => { \n\n            //          alert('foo')\n            console.log(`brand clicked`); \n\n            // Cast the event target back to an input element to access 'checked'\n            const target = event.target as HTMLInputElement;\n            \n            // Check if the radio button is being selected\n            if (target.checked) {\n                // Navigate to the sibling span to get the brand name\n                // Note: nextElementSibling could be null, so we check for it\n                const brandName: string | null = target.nextElementSibling ? target.nextElementSibling.textContent : '';\n                console.log(\"Brand selected:\", brandName);\n                // Perform your actions with the brandName here\n              \n                if(!brandName) {\n                  console.error('Brand name is null'); \n                  return;\n                }\n\n                // Clear Models list\n                this.clearModels(); // Assuming clearModels exists and has been properly typed\n                this.loadModels(brandName as string); // Assuming loadModels exists and accepts a string parameter\n              \n            }\n        });\n    });\n                  \n  }\n\n\n  \n  \n\n  \n  \n  \n  \n\nloadModels(make: string): void {\n    // Assuming modelsDataSourceElems is an array of HTMLElements\n    const modelsDataSourceElems: NodeListOf<HTMLElement> = document.querySelectorAll('[cc-datasource=\"models\"]');\n  \n    const matchingModels: string[] = [];\n  \n    modelsDataSourceElems.forEach((element: HTMLElement) => {\n      // Find all child elements with the class 'cms-select-model-type'\n      const modelTypes: NodeListOf<HTMLElement> = element.querySelectorAll('.cms-select-model-type');\n  \n      modelTypes.forEach((modelType: HTMLElement) => {\n        // Check if this modelType has a child with class 'data_model-make' that matches the make parameter\n        const modelMake: HTMLElement | null = modelType.querySelector('.data_model-make');\n        if (modelMake && modelMake.textContent && modelMake.textContent.trim().toLowerCase() === make.toLowerCase()) {\n          // If a matching model make is found, collect the model's name\n          const modelNameElem: HTMLElement | null = modelType.querySelector('.model-name');\n          if (modelNameElem && modelNameElem.textContent) {\n            let modelName: string = modelNameElem.textContent.trim(); \n            matchingModels.push(modelName);\n            \n            console.log(modelName);\n            // Assuming createModel is a function that accepts a string and does something with it\n            this.createModel(modelName);\n          }\n        }\n      });\n    });\n  }\n  \n  createModel(name: string): void {\n    console.log(`creating model - ${name}`);\n  \n    // Assuming modelsSelectElem and modelsNavElem are already defined somewhere as HTMLElements\n    // const modelsSelectElem: HTMLElement | null = document.querySelector('.models-select'); // Update selector as necessary\n    // const modelsNavElem: HTMLElement | null = document.querySelector('.models-nav'); // Update selector as necessary\n    const modelsSelectElem: HTMLSelectElement | undefined = (window as any).modelsSelectElem;\n    const modelsNavElem: HTMLElement | undefined = (window as any).modelsNavElem;\n  \n    if (modelsSelectElem) {\n      const option = document.createElement('option');\n      option.value = name;\n      option.textContent = name;\n  \n      // TypeScript knows modelsSelectElem is an HTMLElement, but we know it's more specific, a select element\n      (modelsSelectElem as HTMLSelectElement).appendChild(option);\n  \n      console.log('Model option created');\n    } else {\n      console.log('Select element not found');\n    }\n  \n    if (modelsNavElem) {\n      const linkElement = document.createElement('a');\n      linkElement.href = '#';\n      linkElement.classList.add('sort_field', 'w-dropdown-link');\n      linkElement.tabIndex = -1;\n      linkElement.setAttribute('role', 'option');\n      linkElement.setAttribute('aria-selected', 'false');\n      linkElement.textContent = name;\n  \n      modelsNavElem.appendChild(linkElement);\n  \n      linkElement.addEventListener('click', event => {\n        event.preventDefault();\n        this.selectModel(name); // Ensure selectModel is also properly typed in TypeScript\n      });\n    } else {\n      console.error('The specific nav element was not found.');\n    }\n  }\n  \n\n  selectModel(name: string): void {\n    // Access the select element; assuming it's globally available\n    // Ensure that modelsSelectElem is declared and correctly typed elsewhere in your TypeScript code\n    const modelsSelectElem: HTMLSelectElement | undefined = (window as any).modelsSelectElem;\n  \n\n\n\nconsole.log (\"selectModel select\", modelsSelectElem); \n\n\n    console.log(`selecting model - ${name}`);\n  \n    if (modelsSelectElem) {\n      let found = false; // Flag to indicate if the option is found\n      for (let i = 0; i < modelsSelectElem.options.length; i++) {\n        if (modelsSelectElem.options[i].value === name) {\n          modelsSelectElem.selectedIndex = i; // Change the selected index to the found option\n  \n          // Create and dispatch a 'change' event that bubbles\n          let changeEvent = new Event('change', { bubbles: true, cancelable: true });\n          modelsSelectElem.dispatchEvent(changeEvent);\n  \n          // Optionally dispatch an 'input' event if necessary\n          changeEvent = new Event('input', { bubbles: true, cancelable: true });\n          modelsSelectElem.dispatchEvent(changeEvent);\n  \n          found = true;\n          console.log(`Model '${name}' selected.`);\n          break; // Exit the loop once the matching option is found\n        }\n      }\n  \n      if (!found) {\n        console.log(`Model '${name}' not found in the select options.`);\n      }\n    } else {\n      console.error('modelsSelectElem is not defined on window.');\n    }\n  }\n  \n\n  clearModels(): void {\n\n\n\n    // Accessing global elements; ensure they are declared and typed appropriately elsewhere in your TypeScript code\n    const modelsSelectElem: HTMLSelectElement | undefined = (window as any).modelsSelectElem;\n    const modelsNavElem: HTMLElement | undefined = (window as any).modelsNavElem;\n  \n\nconsole.log (\"select elem\", modelsSelectElem); \n\n    if (modelsSelectElem) {\n      // Clear all existing options\n      modelsSelectElem.innerHTML = '';\n  \n      console.log(modelsSelectElem.innerHTML);\n  \n      // Create the new default option\n      const defaultOption = document.createElement('option');\n      defaultOption.value = '';\n      defaultOption.textContent = 'Select Model...';\n  \n      // Add the default option to the select element\n      modelsSelectElem.appendChild(defaultOption);\n  \n      // Assuming removeFilterTagByName is correctly typed and declared elsewhere\n      this.removeFilterTagByName(\"Model\");\n  \n      console.log('Models cleared');\n  \n    } else {\n      console.log('Select element not found');\n    }\n  \n    if (modelsNavElem) {\n      // Remove existing links\n      const links = modelsNavElem.querySelectorAll('a');\n      links.forEach(link => link.parentNode?.removeChild(link));\n  \n      // Create and append the new default link\n      const linkElement = document.createElement('a');\n      linkElement.href = '#';\n      linkElement.classList.add('sort_field', 'w-dropdown-link', 'w--current');\n      linkElement.tabIndex = -1;\n      linkElement.role = 'option';\n      linkElement.setAttribute('aria-selected', 'false');\n      linkElement.textContent = 'Select Model...';\n  \n      modelsNavElem.appendChild(linkElement);\n  \n    } else {\n      console.log('Nav element not found');\n    }\n  }\n  \n  \n  removeFilterTagByName(tagName: string): void {\n    // Find all elements that contain the tag text\n    const tagElements = document.querySelectorAll<HTMLDivElement>('div[fs-cmsfilter-element=\"tag-text\"]');\n  \n    tagElements.forEach(element => {\n      // Check if the current element's text includes the tagName\n      if (element.textContent && element.textContent.includes(tagName)) {\n        // Find the close icon in the same tag-template parent\n        const closeIcon = element.closest('div[fs-cmsfilter-element=\"tag-template\"]')?.querySelector<HTMLImageElement>('img[fs-cmsfilter-element=\"tag-remove\"]');\n        if (closeIcon) {\n          // Trigger a click event on the close icon\n          closeIcon.click();\n        }\n      }\n    });\n  }\n\n}\n", "/*\n * Sygnal\n * Route Dispatcher\n * \n */\n\ntype RouteHandler = () => void;\n\nexport interface Routes {\n    [path: string]: RouteHandler;\n}\n\n// Example routes\nconst routes: Routes = {\n    '/': () => {\n        console.log('This is the homepage.');\n        // Your function for the homepage\n    },\n    '/about': () => {\n        console.log('This is the about page.');\n        // Your function for the about page\n    },\n    '/contact/*': () => {\n        console.log('This is the contact page.');\n        // Your function for the contact page\n    },\n    // ... add more routes as needed\n};\n\nexport class RouteDispatcher {\n\n    routes: Routes;\n\n    constructor() {\n//        this.routes = {};\n    }\n\n    matchRoute(path: string): RouteHandler | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    dispatchRoute() {\n        const path = window.location.pathname;\n        const handler = this.matchRoute(path);\n        if (handler) {\n            handler();\n        } else {\n            console.log('No specific function for this path.');\n            // Default function or behavior for unspecified paths\n        }\n    }\n    \n    \n}", "/*\n * Custom Cages \n * Main entry point\n * \n */\n\n import { FilterPage } from './page/filter';\nimport { RouteDispatcher } from './routeDispatcher';\n\n// Global vars\nconst SITE_NAME = 'CustomCages';\nconst VERSION = 'v0.1.0';\n\n// Global object\nwindow[SITE_NAME] = window[SITE_NAME] || {}; \nvar Rise = window[SITE_NAME];\n\n\n\n// const modelsDataSourceElems = document.querySelectorAll('[cc-datasource=\"models\"]');\n// var modelsSelectElem = document.querySelector('[fs-cmsfilter-field=\"Model\"]');\n// const modelsNavElem = document.querySelector('.select-model nav');\n\n\n\n  // https://finsweet.com/attributes/api/cms-filter \n//  window.fsAttributes.cmsfilter.init();\n  \n  // Do something with the matching models, like logging them to the console\n//  console.log(matchingModels);\n\n\n\n\n// Extend the Window interface to include fsAttributes\ndeclare global {\n    interface Window {\n      fsAttributes: [string, (filterInstances: any[]) => void][];\n\n      modelsDataSourceElems: NodeListOf<HTMLElement>;\n      modelsSelectElem: HTMLElement | null;\n      modelsNavElem: HTMLElement | null;\n    }\n  }\n  \n  // Check if fsAttributes exists, if not initialize it\n  window.fsAttributes = window.fsAttributes || [];\n  \n  // Push your custom attribute and function into the fsAttributes array\n  window.fsAttributes.push([\n    'cmsfilter',\n    (filterInstances: any[]) => { // Assuming 'any[]' for filterInstances type, adjust as known\n      console.log('cmsfilter Successfully loaded!');\n      console.log(filterInstances);\n      \n      // Assuming you want to store the first instance globally on the window object\n      // First, extend the Window interface to include filterInstance\n      [window.filterInstance] = filterInstances;\n    },\n  ]);\n  \n\n  window.modelsDataSourceElems = document.querySelectorAll('[cc-datasource=\"models\"]');\n  window.modelsSelectElem = document.querySelector('[fs-cmsfilter-field=\"Model\"]');\n  window.modelsNavElem = document.querySelector('.select-model nav');\n\n\n  // Additional declaration to inform TypeScript about the new property\n  declare global {\n    interface Window {\n      filterInstance?: any; // Adjust the type according to what filterInstance actually is\n\n      modelsDataSourceElems: NodeListOf<HTMLElement>;\n      modelsSelectElem: HTMLElement | null;\n      modelsNavElem: HTMLElement | null;\n    }\n  }\n  \n\n\n\n  function init(): void {\n  \n    console.log(`${SITE_NAME} package init ${VERSION}`);\n\n    // (new Modal()).init();  \n\n    var routeDispatcher = new RouteDispatcher();\n    routeDispatcher.routes = {\n        '/categories/roll-cage-kits': () => {\n\n            (new FilterPage()).init();\n\n        },\n    };\n    routeDispatcher.dispatchRoute(); \n\n}\n\ninit(); \n  \n"],
  "mappings": "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",
  "names": []
}
