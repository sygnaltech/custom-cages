{
  "version": 3,
  "sources": ["../src/dropdown.ts", "../src/custom-form-select.ts"],
  "sourcesContent": ["\n/*\n * Webflow Dropdown Element\n * used to manipulate the element.  \n */ \n\n// TESTING:\n// https://x-dropdown.design.webflow.com/?pageId=65ee695cf730614c28b248ae \n\nexport class WebflowDropdown {\n\n  // Dropdown element parts\n\n  dropdownElem: HTMLElement; // .w-dropdown\n  dropdownToggleElem: HTMLElement; // .w-dropdown-toggle\n  dropdownListElem: HTMLElement; // .w-dropdown-list\n\n  // Determines if the dropdown is open\n  get isOpen(): boolean {\n    return this.dropdownListElem.classList.contains('w--open');\n  } \n\n\n// This is a typical dropdown element\n// in Webflow \n\n/*\n<div data-hover=\"false\" data-delay=\"0\" class=\"w-dropdown\" style=\"\">\n   <div class=\"w-dropdown-toggle\" id=\"w-dropdown-toggle-0\" aria-controls=\"w-dropdown-list-0\" aria-haspopup=\"menu\" aria-expanded=\"false\" role=\"button\" tabindex=\"0\">\n      <div class=\"w-icon-dropdown-toggle\" aria-hidden=\"true\"></div>\n      <div>Dropdown</div>\n   </div>\n   <nav class=\"w-dropdown-list\" id=\"w-dropdown-list-0\" aria-labelledby=\"w-dropdown-toggle-0\"><a href=\"#\" class=\"w-dropdown-link\" tabindex=\"0\">Link 1</a><a href=\"#\" class=\"w-dropdown-link\" tabindex=\"0\">Link 2</a><a href=\"#\" class=\"w-dropdown-link\" tabindex=\"0\">Link 3</a></nav>\n</div>\n*/ \n\n  \n\n  constructor(elem: HTMLElement) { \n\n    // Get the dropdown primary element\n    if (!elem.classList.contains('w-dropdown')) {\n      throw new Error(\"The provided element is not a Webflow dropdown element.\");\n    }\n    this.dropdownElem = elem;\n\n    // Get the toggle\n    const toggleElem = elem.querySelector('.w-dropdown-toggle');\n\n    // Get the list\n    const listElem = elem.querySelector('.w-dropdown-list');\n\n    if (!toggleElem || !listElem) {\n      throw new Error(\"The dropdown element does not have the required child elements.\");\n    }\n\n    this.dropdownToggleElem = toggleElem as HTMLElement;\n    this.dropdownListElem = listElem as HTMLElement;\n\n  }\n\n  init() {\n                  \n  }\n\n  click(): void {\n\n    // To click Webflow's dropdowns,\n    // we must target the toggle element,\n    // and send both a mousedown and mouseup event ( not a click event )\n\n    // Create & dispatch the mousedown event\n    const mouseDownEvent = new MouseEvent('mousedown', {\n      bubbles: true, // Allows the event to bubble up the DOM tree\n      cancelable: true, // Allows the event to be cancelable\n    });\n    this.dropdownToggleElem.dispatchEvent(mouseDownEvent);\n\n    // Create & dispatch the mouseup event\n    const mouseUpEvent = new MouseEvent('mouseup', {\n      bubbles: true, // Allows the event to bubble up the DOM tree\n      cancelable: true, // Allows the event to be cancelable\n    });\n    this.dropdownToggleElem.dispatchEvent(mouseUpEvent);\n\n  }\n\n  open(): void {\n\n    console.log(\"state\", this.isOpen) \n\n\n    if (!this.isOpen) {\n\n// this.dropdownToggleElem.classList.add(\"w--open\");\n// this.dropdownListElem.classList.add(\"w--open\");\n// this.dropdownToggleElem.setAttribute(\"aria-expanded\", \"true\");\n// this.dropdownElem.style.zIndex = '901';\n\n      this.click(); \n//      this.dropdownToggleElem.click();\n    }\n  }\n\n  close(): void {\n    console.log(\"close handler\")\n    console.log(\"state\", this.isOpen) \n    // if (this.isOpen) {\n    //   this.dropdownToggleElem.click();\n    //   console.log(\"clicked close\"); \n    // }\n\n    if (this.isOpen) {\n      // this.dropdownToggleElem.classList.remove(\"w--open\");\n      // this.dropdownListElem.classList.remove(\"w--open\");\n      // this.dropdownToggleElem.setAttribute(\"aria-expanded\", \"false\");\n      // this.dropdownElem.style.zIndex = '';\n      this.click(); \n    }\n    \n\n\n  }\n  \n  toggle(): void {\n\n    this.isOpen ? this.close() : this.open();\n\n  }\n\n  clear(keepFirstItem: boolean = false): void {\n\n      // Select all direct child anchor elements of the parent element\n      const listItems: NodeListOf<HTMLAnchorElement> = this.dropdownListElem.querySelectorAll('a');\n\n      // Iterate over the NodeList, and optionally keep the first item based on keepFirstItem flag\n      listItems.forEach((anchor, index) => {\n        if (keepFirstItem && index === 0) {\n          // Skip the first item\n        } else {\n          // Delete the anchor element\n          anchor.remove();\n        }\n      });\n\n  }\n\n}\n", "\n/*\n * Custom Form Select Dropdown Element\n * modeled after Finsweet's Custom Form Select Attribute \n * \n * Has;\n * - a label area to show the current item\n * - a select list for binding FS attributes\n * - a Webflow dropdown element for interaction\n * \n * Provides;\n * - Loading\n * - Clearing\n * - Loading from a specific dataset\n * - Update heading on select\n * - Reset selection\n * - Add item, remove item\n * \n */\n\nimport { WebflowDropdown } from \"./dropdown\";\n\n \n\n\nexport class CustomFormSelect extends WebflowDropdown {\n\n  // Dropdown element parts\n\n  // Determines if the dropdown is open\n  // get isOpen(): boolean {\n  //   return this.dropdownListElem.classList.contains('w--open');\n  // } \n\n\n\n\n  \n\n  constructor(elem: HTMLElement) { \n\n    super(elem); \n\n    // // Get the dropdown primary element\n    // if (!elem.classList.contains('w-dropdown')) {\n    //   throw new Error(\"The provided element is not a Webflow dropdown element.\");\n    // }\n    // this.dropdownElem = elem;\n\n    // // Get the toggle\n    // const toggleElem = elem.querySelector('.w-dropdown-toggle');\n\n    // // Get the list\n    // const listElem = elem.querySelector('.w-dropdown-list');\n\n    // if (!toggleElem || !listElem) {\n    //   throw new Error(\"The dropdown element does not have the required child elements.\");\n    // }\n\n    // this.dropdownToggleElem = toggleElem as HTMLElement;\n    // this.dropdownListElem = listElem as HTMLElement;\n\n  }\n\n  init() {\n                  \n  }\n\n \n\n  clear(keepFirstItem: boolean = false): void {\n\n    // Clear the <select> \n\n    // Clear the dropdown\n    super.clear(keepFirstItem);\n\n    // TODO: update FS filter? \n\n  }\n\n}\n"],
  "mappings": ";;AASO,MAAM,kBAAN,MAAsB;AAAA,IAS3B,IAAI,SAAkB;AACpB,aAAO,KAAK,iBAAiB,UAAU,SAAS,SAAS;AAAA,IAC3D;AAAA,IAkBA,YAAY,MAAmB;AAG7B,UAAI,CAAC,KAAK,UAAU,SAAS,YAAY,GAAG;AAC1C,cAAM,IAAI,MAAM,yDAAyD;AAAA,MAC3E;AACA,WAAK,eAAe;AAGpB,YAAM,aAAa,KAAK,cAAc,oBAAoB;AAG1D,YAAM,WAAW,KAAK,cAAc,kBAAkB;AAEtD,UAAI,CAAC,cAAc,CAAC,UAAU;AAC5B,cAAM,IAAI,MAAM,iEAAiE;AAAA,MACnF;AAEA,WAAK,qBAAqB;AAC1B,WAAK,mBAAmB;AAAA,IAE1B;AAAA,IAEA,OAAO;AAAA,IAEP;AAAA,IAEA,QAAc;AAOZ,YAAM,iBAAiB,IAAI,WAAW,aAAa;AAAA,QACjD,SAAS;AAAA,QACT,YAAY;AAAA,MACd,CAAC;AACD,WAAK,mBAAmB,cAAc,cAAc;AAGpD,YAAM,eAAe,IAAI,WAAW,WAAW;AAAA,QAC7C,SAAS;AAAA,QACT,YAAY;AAAA,MACd,CAAC;AACD,WAAK,mBAAmB,cAAc,YAAY;AAAA,IAEpD;AAAA,IAEA,OAAa;AAEX,cAAQ,IAAI,SAAS,KAAK,MAAM;AAGhC,UAAI,CAAC,KAAK,QAAQ;AAOhB,aAAK,MAAM;AAAA,MAEb;AAAA,IACF;AAAA,IAEA,QAAc;AACZ,cAAQ,IAAI,eAAe;AAC3B,cAAQ,IAAI,SAAS,KAAK,MAAM;AAMhC,UAAI,KAAK,QAAQ;AAKf,aAAK,MAAM;AAAA,MACb;AAAA,IAIF;AAAA,IAEA,SAAe;AAEb,WAAK,SAAS,KAAK,MAAM,IAAI,KAAK,KAAK;AAAA,IAEzC;AAAA,IAEA,MAAM,gBAAyB,OAAa;AAGxC,YAAM,YAA2C,KAAK,iBAAiB,iBAAiB,GAAG;AAG3F,gBAAU,QAAQ,CAAC,QAAQ,UAAU;AACnC,YAAI,iBAAiB,UAAU,GAAG;AAAA,QAElC,OAAO;AAEL,iBAAO,OAAO;AAAA,QAChB;AAAA,MACF,CAAC;AAAA,IAEL;AAAA,EAEF;;;AC1HO,MAAM,mBAAN,cAA+B,gBAAgB;AAAA,IAcpD,YAAY,MAAmB;AAE7B,YAAM,IAAI;AAAA,IAqBZ;AAAA,IAEA,OAAO;AAAA,IAEP;AAAA,IAIA,MAAM,gBAAyB,OAAa;AAK1C,YAAM,MAAM,aAAa;AAAA,IAI3B;AAAA,EAEF;",
  "names": []
}
