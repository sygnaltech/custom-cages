{
  "version": 3,
  "sources": ["../src/dropdown.ts"],
  "sourcesContent": ["\n/*\n * Webflow Dropdown Element\n * used to manipulate the element.  \n */ \n\n// TESTING:\n// https://x-dropdown.design.webflow.com/?pageId=65ee695cf730614c28b248ae \n\nexport class WebflowDropdown {\n\n  // Clickable item\n\n// .w-dropdown\n\n  dropdownElem: HTMLElement;\n  dropdownToggleElem: HTMLElement;\n  dropdownListElem: HTMLElement; \n\n\n  // Getter to determine if the dropdown is open\n  get isOpen(): boolean {\n    return this.dropdownListElem.classList.contains('w--open');\n  } \n\n\n// .w-dropdown-toggle\n\n// Style changes on open too\n// goes on DIV and NAV \n// .w--open\n/*\n\n<div data-hover=\"false\" data-delay=\"0\" class=\"w-dropdown\" style=\"\">\n   <div class=\"w-dropdown-toggle\" id=\"w-dropdown-toggle-0\" aria-controls=\"w-dropdown-list-0\" aria-haspopup=\"menu\" aria-expanded=\"false\" role=\"button\" tabindex=\"0\">\n      <div class=\"w-icon-dropdown-toggle\" aria-hidden=\"true\"></div>\n      <div>Dropdown</div>\n   </div>\n   <nav class=\"w-dropdown-list\" id=\"w-dropdown-list-0\" aria-labelledby=\"w-dropdown-toggle-0\"><a href=\"#\" class=\"w-dropdown-link\" tabindex=\"0\">Link 1</a><a href=\"#\" class=\"w-dropdown-link\" tabindex=\"0\">Link 2</a><a href=\"#\" class=\"w-dropdown-link\" tabindex=\"0\">Link 3</a></nav>\n</div>\n*/ \n\n  \n\n  constructor(elem: HTMLElement) {\n    if (!elem.classList.contains('w-dropdown')) {\n      throw new Error(\"The provided element is not a Webflow dropdown element.\");\n    }\n    this.dropdownElem = elem;\n\n    const toggleElem = elem.querySelector('.w-dropdown-toggle');\n    const listElem = elem.querySelector('.w-dropdown-list');\n\n    if (!toggleElem || !listElem) {\n      throw new Error(\"The dropdown element does not have the required child elements.\");\n    }\n\n    this.dropdownToggleElem = toggleElem as HTMLElement;\n    this.dropdownListElem = listElem as HTMLElement;\n\n  }\n  \n  init() {\n\n\n                  \n  }\n\n// Function to simulate a click event at the position of an element\nsimulateClickOnElement(elem: HTMLElement): void {\n  // Get the element's position relative to the viewport\n  const rect = elem.getBoundingClientRect();\n\n\n\n  // Calculate the position for the click\n  // Here we choose the center of the element as the click position\n  const clientX = rect.left + rect.width / 2;\n  const clientY = rect.top + rect.height / 2;\n\nconsole.log(\"simclick\", clientX, clientY); \n\n  // Create the click event\n  const clickEvent = new MouseEvent('click', {\n    bubbles: true,      // The event bubbles up through the DOM\n    cancelable: true,   // The event can be canceled\n    view: window,       // The event's view is the current window\n    clientX: clientX,   // The calculated X position\n    clientY: clientY    // The calculated Y position\n  });\n\n  // Dispatch the event from the document to simulate a click at the window level\n  document.dispatchEvent(clickEvent);\n}\n\nsimulatePointerOnElement(elem: HTMLElement): void {\n  // Get the element's position relative to the viewport\n  const rect = elem.getBoundingClientRect();\n\n\n\n  // Calculate the position for the click\n  // Here we choose the center of the element as the click position\n  const clientX = rect.left + rect.width / 2;\n  const clientY = rect.top + rect.height / 2;\n\nconsole.log(\"simclick\", clientX, clientY); \n\n  // Create the click event\n  const clickEvent = new MouseEvent('click', {\n    bubbles: true,      // The event bubbles up through the DOM\n    cancelable: true,   // The event can be canceled\n    view: window,       // The event's view is the current window\n    clientX: clientX,   // The calculated X position\n    clientY: clientY    // The calculated Y position\n  });\n\n  const pointerEventInit = {\n    bubbles: true,\n    cancelable: true,\n    pointerId: 1,\n    width: 1,\n    height: 1,\n    pressure: 0.5,\n    tiltX: 0,\n    tiltY: 0,\n    pointerType: 'mouse',\n    isPrimary: true,\n    isTrusted: true,\n    clientX: clientX,   // The calculated X position\n    clientY: clientY,    // The calculated Y position\n    screenX: clientX,\n    screenY: clientY + 121 \n  };\n\n  if (this.dropdownToggleElem) { \n\nconsole.log(\"clicking pointer event\"); \n\nconst pointerclick = new PointerEvent('click', pointerEventInit);\n\n\n    // const pointerdown = new PointerEvent('pointerdown', pointerEventInit);\n    // const pointerup = new PointerEvent('pointerup', pointerEventInit);\n    // const click = new MouseEvent('click', {\n    //   bubbles: true,\n    //   cancelable: true\n    // });\n    this.dropdownToggleElem.dispatchEvent(pointerclick);\n\n    // this.dropdownToggleElem.dispatchEvent(pointerdown);\n    // this.dropdownToggleElem.dispatchEvent(pointerup);\n    // this.dropdownToggleElem.dispatchEvent(click); // Might still be necessary for full click action simulation\n  }\n\n\n  // Dispatch the event from the document to simulate a click at the window level\n//  document.dispatchEvent(clickEvent);\n// this.dropdownToggleElem.dispatchEvent(clickEvent);\n\n}\n\n\n\n  click(): void {\n\n//    this.dropdownToggleElem.click();\n\n    // Create the mousedown event\n    const mouseDownEvent = new MouseEvent('mousedown', {\n      bubbles: true, // Allows the event to bubble up the DOM tree\n      cancelable: true, // Allows the event to be cancelable\n    });\n\n    // Dispatch the mousedown event to the element\n    this.dropdownToggleElem.dispatchEvent(mouseDownEvent);\n\n    // Create the mouseup event\n    const mouseUpEvent = new MouseEvent('mouseup', {\n      bubbles: true, // Allows the event to bubble up the DOM tree\n      cancelable: true, // Allows the event to be cancelable\n    });\n\n    // Dispatch the mouseup event to the element\n    this.dropdownToggleElem.dispatchEvent(mouseUpEvent);\n\n\n// this.simulatePointerOnElement(this.dropdownToggleElem); \n\n//     setTimeout(() => {\n\n//       // this.dropdownToggleElem.click();\n//       // console.log(\"Clicked close after a 1-second delay\");\n// //debugger; \n// console.log(this.dropdownListElem)\n\n//       const event = new MouseEvent('click', {\n//         bubbles: true,\n//         cancelable: true,\n//         view: window,\n//       });\n//       this.dropdownToggleElem.dispatchEvent(event);\n//       console.log(\"Dispatched custom click event for closing\");\n//     }, 3000); // Delay in milliseconds (1000 ms = 1 second)\n\n  }\n\n  open(): void {\n\n    console.log(\"state\", this.isOpen) \n\n\n    if (!this.isOpen) {\n\n// this.dropdownToggleElem.classList.add(\"w--open\");\n// this.dropdownListElem.classList.add(\"w--open\");\n// this.dropdownToggleElem.setAttribute(\"aria-expanded\", \"true\");\n// this.dropdownElem.style.zIndex = '901';\n\n      this.click(); \n//      this.dropdownToggleElem.click();\n    }\n  }\n\n  close(): void {\n    console.log(\"close handler\")\n    console.log(\"state\", this.isOpen) \n    // if (this.isOpen) {\n    //   this.dropdownToggleElem.click();\n    //   console.log(\"clicked close\"); \n    // }\n\n    if (this.isOpen) {\n      // this.dropdownToggleElem.classList.remove(\"w--open\");\n      // this.dropdownListElem.classList.remove(\"w--open\");\n      // this.dropdownToggleElem.setAttribute(\"aria-expanded\", \"false\");\n      // this.dropdownElem.style.zIndex = '';\n                  this.click(); \n    }\n    \n\n\n  }\n  \n  toggle(): void {\n\n    this.isOpen ? this.close() : this.open();\n\n  }\n\n}\n"],
  "mappings": ";;AASO,MAAM,kBAAN,MAAsB;AAAA,IAY3B,IAAI,SAAkB;AACpB,aAAO,KAAK,iBAAiB,UAAU,SAAS,SAAS;AAAA,IAC3D;AAAA,IAqBA,YAAY,MAAmB;AAC7B,UAAI,CAAC,KAAK,UAAU,SAAS,YAAY,GAAG;AAC1C,cAAM,IAAI,MAAM,yDAAyD;AAAA,MAC3E;AACA,WAAK,eAAe;AAEpB,YAAM,aAAa,KAAK,cAAc,oBAAoB;AAC1D,YAAM,WAAW,KAAK,cAAc,kBAAkB;AAEtD,UAAI,CAAC,cAAc,CAAC,UAAU;AAC5B,cAAM,IAAI,MAAM,iEAAiE;AAAA,MACnF;AAEA,WAAK,qBAAqB;AAC1B,WAAK,mBAAmB;AAAA,IAE1B;AAAA,IAEA,OAAO;AAAA,IAIP;AAAA,IAGF,uBAAuB,MAAyB;AAE9C,YAAM,OAAO,KAAK,sBAAsB;AAMxC,YAAM,UAAU,KAAK,OAAO,KAAK,QAAQ;AACzC,YAAM,UAAU,KAAK,MAAM,KAAK,SAAS;AAE3C,cAAQ,IAAI,YAAY,SAAS,OAAO;AAGtC,YAAM,aAAa,IAAI,WAAW,SAAS;AAAA,QACzC,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACF,CAAC;AAGD,eAAS,cAAc,UAAU;AAAA,IACnC;AAAA,IAEA,yBAAyB,MAAyB;AAEhD,YAAM,OAAO,KAAK,sBAAsB;AAMxC,YAAM,UAAU,KAAK,OAAO,KAAK,QAAQ;AACzC,YAAM,UAAU,KAAK,MAAM,KAAK,SAAS;AAE3C,cAAQ,IAAI,YAAY,SAAS,OAAO;AAGtC,YAAM,aAAa,IAAI,WAAW,SAAS;AAAA,QACzC,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACF,CAAC;AAED,YAAM,mBAAmB;AAAA,QACvB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,OAAO;AAAA,QACP,OAAO;AAAA,QACP,aAAa;AAAA,QACb,WAAW;AAAA,QACX,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT,SAAS,UAAU;AAAA,MACrB;AAEA,UAAI,KAAK,oBAAoB;AAE/B,gBAAQ,IAAI,wBAAwB;AAEpC,cAAM,eAAe,IAAI,aAAa,SAAS,gBAAgB;AAS3D,aAAK,mBAAmB,cAAc,YAAY;AAAA,MAKpD;AAAA,IAOF;AAAA,IAIE,QAAc;AAKZ,YAAM,iBAAiB,IAAI,WAAW,aAAa;AAAA,QACjD,SAAS;AAAA,QACT,YAAY;AAAA,MACd,CAAC;AAGD,WAAK,mBAAmB,cAAc,cAAc;AAGpD,YAAM,eAAe,IAAI,WAAW,WAAW;AAAA,QAC7C,SAAS;AAAA,QACT,YAAY;AAAA,MACd,CAAC;AAGD,WAAK,mBAAmB,cAAc,YAAY;AAAA,IAqBpD;AAAA,IAEA,OAAa;AAEX,cAAQ,IAAI,SAAS,KAAK,MAAM;AAGhC,UAAI,CAAC,KAAK,QAAQ;AAOhB,aAAK,MAAM;AAAA,MAEb;AAAA,IACF;AAAA,IAEA,QAAc;AACZ,cAAQ,IAAI,eAAe;AAC3B,cAAQ,IAAI,SAAS,KAAK,MAAM;AAMhC,UAAI,KAAK,QAAQ;AAKH,aAAK,MAAM;AAAA,MACzB;AAAA,IAIF;AAAA,IAEA,SAAe;AAEb,WAAK,SAAS,KAAK,MAAM,IAAI,KAAK,KAAK;AAAA,IAEzC;AAAA,EAEF;",
  "names": []
}
